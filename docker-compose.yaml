version: "3.8"

x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

services:
  loki:
    image: grafana/loki:2.8.3
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - sender_network


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging
    networks:
      - sender_network

  tempo:
    image: grafana/tempo:2.1.1
    container_name: tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "4317:4317"
    depends_on:
      - loki
    logging: *default-logging
    networks:
      - sender_network


  redis-server:
    image: "redis:alpine"
    container_name: redis
    command: redis-server
    restart: on-failure
    ports:
      - "6379:6379"
    networks:
      - sender_network

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    container_name: rabbitmq
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - sender_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/

  sender-api:
    container_name: sender-api
    build: .
    command: bash -c "alembic upgrade head && python main.py"
    volumes:
      - media:/api/media
    ports:
      - "8001:8001"
    restart: always
    networks:
      - sender_network
    depends_on:
      - loki
    environment:
      APP_NAME: "sender-api"
    logging: *default-logging

  worker:
    container_name: sender-worker
    build: .
    command: bash -c "python celery_start.py"
    restart: on-failure
    depends_on:
      - rabbitmq
    networks:
      - sender_network

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - redis-server
    networks:
      - sender_network

volumes:
  rabbitmq_data:
      driver: local
      driver_opts:
        type: none
        o: bind
        device: ../rabbitmq_data
  rabbitmq_log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../rabbitmq_log
  media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../media
  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ../prometheus_data


networks:
  movlab_network:
    name: sender_network
    driver: bridge